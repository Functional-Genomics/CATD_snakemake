## Rule index for all debCAM deconvolutions
##
## @zgr2788
##
##
## Description:
## This file includes all rules associated with deconvolution using debCAM
## package. The 3 different modes are
##
##      1- Unsupervised with k coefficient
##      2- Semi-supervised with C1 reference
##      3- Semi-supervised with C2 reference
##
##
##
##
##
##
##
##

def getBulks():
    inList = []

    if config['seededRun']:
        seedStatus = "_seeded"
    else:
        seedStatus = ""

    if config["stParam"]['scaleFirst']:
        st = "_scaled_transformed"
    else:
        st = "_transformed_scaled"

    filename_T = str("Input/Normalized_tables/" + config['sampleName'] + "_pbulks" + seedStatus + st + ".rds")
    filename_P = str("Input/Psuedobulks/" + config['sampleName'] + "_props" + seedStatus + ".rds")

    inList.append(filename_T)
    inList.append(filename_P)

    return inList


def getC2(inList):
    if config['seededRun']:
        seedStatus = "_seeded"
    else:
        seedStatus = ""

    filename_C2 = str("Input/References/" + config["sampleName"] + "_C2" + seedStatus + ".rds")

    inList.append(filename_C2)

    return inList


def getC1(inList):
        if config['seededRun']:
            seedStatus = "_seeded"
        else:
            seedStatus = ""

        filename_C1 = str("Input/References/" + config["sampleName"] + "_C1" + seedStatus + ".rds")

        inList.append(filename_C1)

        return inList



rule debCAM_unsupervised:
    input:
        getBulks()

    output:
        "Output/{sample}_debCAM_unsupervised.txt"

    params:
        cellTypes_n = config['expectedTypes']

    conda:
        "env.yaml"

    shell:
        """
        Rscript Modules/debCAM/debCAM_u.R {input} {params}
        touch {output}
        """



rule debCAM_marker:
    input:
        getC2(getBulks())

    output:
        "Output/{sample}_debCAM_marker.txt"

    conda:
        "env.yaml"

    shell:
        """
        Rscript Modules/debCAM/debCAM_marker.R {input}
        touch {output}
        """



rule debCAM_C1:
    input:
        getC1(getBulks())

    output:
        "Output/{sample}_debCAM_C1.txt"

    conda:
        "env.yaml"

    shell:
        """
        Rscript Modules/debCAM/debCAM_C1.R {input}
        touch {output}
        """
